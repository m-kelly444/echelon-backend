import hashlib
import json
import threading
import re
import os
import time
from datetime import datetime, timedelta
from echelon.utils.logging import get_logger
from echelon.database import get_db_connection, execute_query

logger = get_logger(__name__)

class ThreatDataManager:
    """Simplified data manager to avoid freezes during initialization"""
    def __init__(self):
        logger.info("Initializing simplified ThreatDataManager...")
        self.db_lock = threading.Lock()
        # Skip scheduled collection which can cause freezes
    
    def get_taxonomy_values(self, type_name):
        try:
            with self.db_lock:
                with get_db_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute("SELECT value FROM taxonomy WHERE type = ?", (type_name,))
                    values = [row['value'] for row in cursor.fetchall()]
            return values
        except Exception as e:
            logger.error(f"Error in get_taxonomy_values: {str(e)}")
            # No fallback synthetic taxonomies
            logger.warning(f"No taxonomy values found for {type_name}")
            return []    
    def store_prediction(self, prediction):
        try:
            if 'id' not in prediction:
                prediction['id'] = hashlib.sha256(f"{prediction['apt_group']}-{prediction['timestamp']}".encode()).hexdigest()
            
            if 'created_at' not in prediction:
                prediction['created_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            with self.db_lock:
                with get_db_connection() as conn:
                    cursor = conn.cursor()
                    
                    # Check if the predictions table exists, create if it doesn't
                    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='predictions'")
                    if not cursor.fetchone():
                        cursor.execute('''
                        CREATE TABLE IF NOT EXISTS predictions (
                            id TEXT PRIMARY KEY,
                            apt_group TEXT,
                            attack_type TEXT,
                            threat_category TEXT,
                            region TEXT,
                            industry TEXT,
                            severity TEXT,
                            likelihood TEXT,
                            confidence INTEGER,
                            timestamp TEXT,
                            description TEXT,
                            indicators TEXT,
                            affecting TEXT,
                            evidence TEXT,
                            created_at TEXT
                        )
                        ''')
                    
                    cursor.execute(
                        """
                        INSERT OR REPLACE INTO predictions 
                        (id, apt_group, attack_type, threat_category, region, industry, severity, likelihood, 
                        confidence, timestamp, description, indicators, affecting, evidence, created_at)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """,
                        (
                            prediction['id'],
                            prediction['apt_group'],
                            prediction['attack_type'],
                            prediction['threat_category'],
                            prediction['region'],
                            prediction['industry'],
                            prediction['severity'],
                            prediction['likelihood'],
                            prediction['confidence'],
                            prediction['timestamp'],
                            prediction['description'],
                            json.dumps(prediction.get('indicators', {})),
                            prediction['affecting'],
                            json.dumps(prediction.get('evidence', [])),
                            prediction['created_at']
                        )
                    )
                    
                    conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error storing prediction: {str(e)}")
            return False
    
    def get_recent_predictions(self, limit=20):
        try:
            with self.db_lock:
                with get_db_connection() as conn:
                    cursor = conn.cursor()
                    
                    # Check if the predictions table exists
                    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='predictions'")
                    if not cursor.fetchone():
                        return []
                    
                    cursor.execute(
                        """
                        SELECT * FROM predictions 
                        ORDER BY timestamp ASC
                        LIMIT ?
                        """, 
                        (limit,)
                    )
                    
                    predictions = cursor.fetchall()
            
            for prediction in predictions:
                prediction['indicators'] = json.loads(prediction['indicators'])
                prediction['evidence'] = json.loads(prediction['evidence'])
            
            return predictions
        except Exception as e:
            logger.error(f"Error getting recent predictions: {str(e)}")
            return []
